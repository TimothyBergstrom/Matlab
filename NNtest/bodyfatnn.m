function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 14-Feb-2017 11:47:10.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 13xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [22;118.5;29.5;31.1;79.3;69.4;85;47.2;33;19.1;24.8;21;15.8];
x1_step1.gain = [0.0338983050847458;0.00817494379726139;0.0414507772020725;0.099502487562189;0.0351493848857645;0.0254129606099111;0.0318979266347687;0.0498753117206983;0.124223602484472;0.135135135135135;0.099009900990099;0.143884892086331;0.357142857142857];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.14808091646501434;-0.002223193936085565;-0.0022085822532116957;-0.0021984582164595702;0.0022254902095539967;-0.068065313962894475;-0.22023252069454191;-0.65868442547897954;-0.0021922631240345746;0.0021784020091122776];
IW1_1 = [0.26540206699292102 -0.25433370624460833 0.057399649346982988 -0.033862917553975969 -0.076230453158416561 0.18624662437520639 -0.38219132926213045 -0.4950172851238549 -0.044500294999588456 -0.21791412880426483 -0.36141774285676759 -0.10009581664899378 -0.060178387965064126;-0.00014322618504562654 0.0018801477298906429 -0.0021793819256205513 0.00012394147973315457 -0.00083243380897473501 0.0075264744147980822 0.0023268108325093374 0.0030708518519406403 0.00028598214883785735 0.0048446208484102743 5.6480724323606805e-05 -0.0014159491525842858 0.0022768417605732116;-0.00014226983259427723 0.0018678038252553607 -0.0021650226467579822 0.0001231531646879317 -0.00082689494593852705 0.0074768071356409475 0.0023115300159181488 0.0030506701518719409 0.00028416367407730703 0.0048126593385081065 5.6152362640682884e-05 -0.0014065771367748779 0.0022618165541420108;-0.00014160737764682671 0.0018592509166488768 -0.0021550739092684921 0.00012260665547704353 -0.00082305801111212944 0.0074423963743414151 0.0023009422159397989 0.0030366867894239665 0.00028290298818455282 0.00479051549198262 5.5924349292016943e-05 -0.0014000842922761087 0.0022514067113946529;0.0001433765062816867 -0.001882087590725771 0.0021816385976525586 -0.00012406531817598678 0.00083330438267584283 -0.0075342801539022538 -0.0023292122409207246 -0.0030740234697569555 -0.00028626781684787627 -0.0048496439235062774 -5.6532249508998478e-05 0.0014174221151861969 -0.0022792031316562658;-0.023033480548327781 -0.043292774076245134 0.16003040477063254 -0.21532739540140633 -0.037238757898452525 -0.40106500545747614 0.095330257903992854 0.11096296985672786 0.031218208306978266 -0.43406311990374941 0.028975579598441253 0.12846107328634018 -0.48890921126648346;-0.53391403617083755 0.072303211173769866 -0.18520946962909279 -0.1721637577084717 -0.13545566499796771 0.49640662415741804 0.035239725100297006 0.15952461498169032 -0.20886819359535372 -0.015098009225108009 0.12721126525123089 0.54637832077042636 -0.3657782447919295;-0.43005507648446717 0.011128194930355769 -0.094351359437181509 0.20537745467002733 0.023700853021550686 -0.81566641503156057 -0.1033681725462198 -0.33106580771646149 -0.16636552231764437 0.11271888117531849 -0.15260543047192329 0.23145492306959009 0.27173004597142641;-0.00014120207929487532 0.0018540171659930812 -0.0021489862527203588 0.00012227211257840334 -0.00082071043538716869 0.0074213407100944253 0.002294463282163844 0.0030281300964501486 0.00028213126330952422 0.0047769658146811543 5.5784622466946897e-05 -0.001396111505358613 0.0022450370153223121;0.00014029544375787864 -0.001842306821660474 0.0021353659753159549 -0.00012152325689947612 0.00081545875919294237 -0.0073742326114063991 -0.0022799669382199367 -0.0030089850405546443 -0.0002804037938730705 -0.0047466508491541852 -5.5471442489177093e-05 0.0013872235003484607 -0.0022307860202804061];

% Layer 2
b2 = -0.20665726318139097;
LW2_1 = [0.67480488593540999 0.010783744572640884 0.010712590015271702 0.010663292230851234 -0.010794927251575466 -0.72533640192890092 0.82845965105921737 -0.99584285895678781 0.01063312728350734 -0.010565638776899464];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0421052631578947;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
